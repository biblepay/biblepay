Build BiblePay - Ubuntu

/* Optional:  How to increase swap space on a machine with 1gb of ram:
free #check if swap is 0 then do this:
sudo fallocate -l 1G /swapfile
sudo dd if=/dev/zero of=/swapfile bs=1024 count=1048576
sudo chmod 600 /swapfile
sudo mkswap /swapfile
sudo swapon /swapfile
sudo nano /etc/fstab
#add this line:
/swapfile swap swap defaults 0 0
#save the file
sudo swapon --show
free #check - should be 1G
*/


#Building for Ubuntu 18, 17 on Linux:
First install Ubuntu dependencies:
apt-get install build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils
apt-get install libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-program-options-dev libboost-test-dev libboost-thread-dev
apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler
apt-get install git
apt-get install curl build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake

sudo add-apt-repository ppa:bitcoin/bitcoin
sudo apt-get update
sudo apt-get install libdb4.8-dev libdb4.8++-dev

** These instructions have been updated for RandomX!  Please see below: **

** Building Daemon and QT: **
git clone http://github.com/biblepay/biblepay

# RandomX Part
cd biblepay/src/crypto/RandomX
mkdir build && cd build
cmake -DARCH=native ..
make
cd ../../../../..
# end of RandomX Part
prefix=x86_64-pc-linux-gnu
cd biblepay/depends
make -j 4 # Choose a good -j value, depending on the number of CPU cores available
cd ..
./autogen.sh
#Note: if echo `pwd` does not return your current working directory, replace it with your working directory such as /biblepay/
./configure --prefix `pwd`/depends/x86_64-pc-linux-gnu
make
See more here:
https://github.com/biblepay/biblepay/blob/master/doc/build-unix.md


** How to upgrade BiblePay: **
cd ~/biblepay
git pull origin master
cd src
make


*** NOTE:  
Watchman-on-the-wall is no longer required in BiblePay (as it is compiled as a part of our wallet now) ****


*** TROUBLESHOOTING ****
Q: What if I receive an error during ./autogen.sh?  Libtoolize failed AC_CONFIG_MACRO_DIRS([build-aux/m4]) conflicts with ACLOCAL.AMFLAGS=-I build-aux/m4?
A: This is because some files were downloaded from git with CRLF.  Fix with:
find . -name \*.m4|xargs dos2unix
find . -name \*.ac|xargs dos2unix
find . -name \*.am|xargs dos2unix
find . -name \*.sh|xargs dos2unix




**** DEVELOPER SECTION - FOR DEV USE ****

Devs; Building Windows using Cross-Compile 64-bit version:

https://github.com/bitcoin/bitcoin/blob/master/doc/build-windows.md
cd depends
make HOST=i686-w64-mingw32 -j4
cd ..
./autogen.sh
./configure --prefix /biblepay/depends/i686-w64-mingw32
cd src
sudo make
make deploy
(deploy files in /biblepay)



#How to cross compile MAC on Ubuntu 18:
sudo apt-get install python3-setuptools
sudo apt install build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils git libdb4.8-dev libdb4.8++-dev curl
sudo apt install libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-program-options-dev libboost-test-dev libboost-thread-dev libzmq3-dev
sudo apt install ca-certificates curl g++ git-core pkg-config autoconf librsvg2-bin libtiff-tools libtool automake faketime bsdmainutils cmake imagemagick libcap-dev libz-dev libbz2-dev python python-dev python-setuptools fonts-tuffy p7zip-full sleuthkit
sudo apt install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler
First, extract the MAC SDK.
Log in to your apple developer account: (https://docs.dash.org/en/0.12.3/developers/compiling.html)
A copy of the macOS SDK is required during the build process. To download this, use a Google Chrome in a desktop environment to go to https://appleid.apple.com and create or sign in to your Apple account. Then go to https://developer.apple.com and open the Chrome Developer Tools from the Menu -> More tools -> Developer tools. Click on the Network tab, then go back to your main browser window and copy in the following URL:
https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.3.1/Xcode_7.3.1.dmg
Cancel the download as soon as it begins and go back to your the Network tab in the developer tools. Right click on the network request at the bottom of the list labeled Xcode_7.3.1.dmg and select Copy -> Copy as cURL (bash). Paste this long string of text into your Linux terminal, append -o Xcode_7.3.1.dmg at the end and then press enter to begin the download. Once it is complete, extract the required files from the disc image as follows:
Extract the SDK:
contrib/macdeploy/extract-osx-sdk.sh
rm -rf 5.hfs MacOSX10.11.sdk
mkdir depends/SDKs
mv MacOSX10.11.sdk/ depends/SDKs/
Build the Apple dependencies:
make -C depends HOST=x86_64-apple-darwin11
./autogen.sh
./configure --prefix=`pwd`/depends/x86_64-apple-darwin11
make


